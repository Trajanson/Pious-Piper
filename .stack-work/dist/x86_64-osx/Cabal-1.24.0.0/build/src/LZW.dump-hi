
==================== FINAL INTERFACE ====================
2016-12-31 18:03:52.077696 UTC

interface PiousPiper-0.1.0.0-7JUD62QrIKHrrLhY6xrzv:LZW 8001
  interface hash: cb5045113b2c313823968b24cb1a1196
  ABI hash: 26ef4cb09eaddb3c702526c7dfcdc47d
  export-list hash: dfb27de13cbdd490906c869497dbcdc2
  orphan hash: c7c671a0fb28835900bb8670300d3153
  flag hash: a4046e0fdab24403354cf30558c1ea1c
  sig of: Nothing
  used TH splices: False
  where
exports:
  LZW.compressBuffer
  LZW.decompressBuffer
  LZW.forwardBuildDictionary
  LZW.forwardCompression
  LZW.forwardDecompression
  LZW.lzwBuildDictionary
  LZW.lzwCompress
  LZW.lzwDecompress
  LZW.startingASCIIToIntegerDictionary
  LZW.startingIntegerToASCIIDictionary
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  base-4.9.0.0:Data.Char eb33dc25ecb52d018a0ca26590e2b50b
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.Maybe 5f2ba364cbe65c060bc5436bc0b9d049
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Char 3824744793840b1b7a48109a01ef7f24
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 8f3eaf1368a7ea27857993e3febae6a3
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base 8d095ad71634b5551ba5dc1307b7f9e5
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 62c0e736506aac47ef40569f5b82e19d
0fb59beae0c3ba4fbeee6e753f446cda
  $sfromList ::
    [(GHC.Integer.Type.Integer, a)]
    -> Data.Map.Base.Map GHC.Integer.Type.Integer a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(GHC.Integer.Type.Integer, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ GHC.Integer.Type.Integer @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { DEFAULT ->
                           Data.Map.Base.Bin
                             @ GHC.Integer.Type.Integer
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Base.Tip @ GHC.Integer.Type.Integer @ a)
                             (Data.Map.Base.Tip @ GHC.Integer.Type.Integer @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case GHC.Integer.Type.geInteger# kx ky of wild4 { DEFAULT ->
                           case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild4 of wild5 {
                             GHC.Types.False
                             -> case kx of dt { DEFAULT ->
                                LZW.$wpoly_go10
                                  @ a
                                  1#
                                  (Data.Map.Base.Bin
                                     @ GHC.Integer.Type.Integer
                                     @ a
                                     1#
                                     dt
                                     x
                                     (Data.Map.Base.Tip @ GHC.Integer.Type.Integer @ a)
                                     (Data.Map.Base.Tip @ GHC.Integer.Type.Integer @ a))
                                  wild2 }
                             GHC.Types.True
                             -> case kx of dt { DEFAULT ->
                                LZW.$sfromList1
                                  @ a
                                  (Data.Map.Base.Bin
                                     @ GHC.Integer.Type.Integer
                                     @ a
                                     1#
                                     dt
                                     x
                                     (Data.Map.Base.Tip @ GHC.Integer.Type.Integer @ a)
                                     (Data.Map.Base.Tip @ GHC.Integer.Type.Integer @ a))
                                  wild2 } } } } } } }) -}
9eb1db8d27e3521bb233cac662b58dfe
  $sfromList1 ::
    Data.Map.Base.Map GHC.Integer.Type.Integer a1
    -> [(GHC.Integer.Type.Integer, a1)]
    -> Data.Map.Base.Map GHC.Integer.Type.Integer a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
d330bf39a91baeb8b66cd56e277838cf
  $sfromList2 ::
    [([GHC.Types.Char], a)] -> Data.Map.Base.Map [GHC.Types.Char] a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [([GHC.Types.Char], a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ [GHC.Types.Char] @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { DEFAULT ->
                           Data.Map.Base.Bin
                             @ [GHC.Types.Char]
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Base.Tip @ [GHC.Types.Char] @ a)
                             (Data.Map.Base.Tip @ [GHC.Types.Char] @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case GHC.Classes.$fOrd[]_$s$ccompare1 kx ky of wild4 {
                             DEFAULT
                             -> case kx of dt { DEFAULT ->
                                LZW.$sfromList3
                                  @ a
                                  (Data.Map.Base.Bin
                                     @ [GHC.Types.Char]
                                     @ a
                                     1#
                                     dt
                                     x
                                     (Data.Map.Base.Tip @ [GHC.Types.Char] @ a)
                                     (Data.Map.Base.Tip @ [GHC.Types.Char] @ a))
                                  wild2 }
                             GHC.Types.LT
                             -> case kx of dt { DEFAULT ->
                                LZW.$wpoly_go1
                                  @ a
                                  1#
                                  (Data.Map.Base.Bin
                                     @ [GHC.Types.Char]
                                     @ a
                                     1#
                                     dt
                                     x
                                     (Data.Map.Base.Tip @ [GHC.Types.Char] @ a)
                                     (Data.Map.Base.Tip @ [GHC.Types.Char] @ a))
                                  wild2 } } } } } }) -}
df9f05838e159f6e78aec7cef9a2a1be
  $sfromList3 ::
    Data.Map.Base.Map [GHC.Types.Char] a1
    -> [([GHC.Types.Char], a1)]
    -> Data.Map.Base.Map [GHC.Types.Char] a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
0ca7ae6d75c2f3e96a5152ee0f7b30ff
  $sinsert_$sgo1 ::
    GHC.Integer.Type.Integer
    -> a1
    -> Data.Map.Base.Map GHC.Integer.Type.Integer a1
    -> Data.Map.Base.Map GHC.Integer.Type.Integer a1
  {- Arity: 3, Strictness: <S,1*U><L,U><S,1*U> -}
174916e31ee04ffc833fe33bc4acaef6
  $sinsert_$sgo10 ::
    [GHC.Types.Char]
    -> a1
    -> Data.Map.Base.Map [GHC.Types.Char] a1
    -> Data.Map.Base.Map [GHC.Types.Char] a1
  {- Arity: 3, Strictness: <S,1*U><L,U><S,1*U> -}
0edf0d7f40ba71f14bfc54a3e0537efd
  $slookup1 ::
    GHC.Integer.Type.Integer
    -> Data.Map.Base.Map GHC.Integer.Type.Integer a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
b102b609f5e0719ced98bcb884316ba1
  $slookup3 ::
    [GHC.Types.Char]
    -> Data.Map.Base.Map [GHC.Types.Char] a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
da6e83d4b0f81c6106b540a1299f7993
  $smember1 ::
    GHC.Base.String
    -> Data.Map.Base.Map GHC.Base.String a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
d7fe75893ed86856116be657d234f748
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module LZW.$trModule2 LZW.$trModule1) -}
99caf4815df1621bebfc4e3fbbf5c5c6
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "LZW"#) -}
956f75be7ff8e91171377b4deadda2c0
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "PiousPiper-0.1.0.0-7JUD62QrIKHrrLhY6xrzv"#) -}
7170df9020c7a6d533774aa38ec227e0
  $wforwardBuildDictionary ::
    Data.Map.Base.Map GHC.Integer.Type.Integer [GHC.Types.Char]
    -> [GHC.Integer.Type.Integer]
    -> [GHC.Integer.Type.Integer]
    -> Data.Map.Base.Map GHC.Integer.Type.Integer [GHC.Types.Char]
  {- Arity: 3, Strictness: <S,U><S,1*U><L,1*U>, Inline: [0] -}
9bbd2ee7c8b4be164b1385244ea19108
  $wpoly_go1 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map [GHC.Types.Char] a
    -> [([GHC.Types.Char], a)]
    -> Data.Map.Base.Map [GHC.Types.Char] a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
1fe175d6116b64bd87be859d195919c8
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map GHC.Integer.Type.Integer a
    -> [(GHC.Integer.Type.Integer, a)]
    -> Data.Map.Base.Map GHC.Integer.Type.Integer a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
9530e24cfdd42dcf584613406f7eb57f
  compressBuffer ::
    Data.Map.Base.Map [GHC.Types.Char] GHC.Integer.Type.Integer
    -> [GHC.Types.Char] -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (dictionary :: Data.Map.Base.Map
                                    [GHC.Types.Char] GHC.Integer.Type.Integer)
                   (textInBuffer :: [GHC.Types.Char]) ->
                 case LZW.$slookup3
                        @ GHC.Integer.Type.Integer
                        textInBuffer
                        dictionary of wild {
                   GHC.Base.Nothing -> LZW.compressBuffer1
                   GHC.Base.Just ipv -> ipv }) -}
c7ea99981d2239ea4114ae0ae327e14c
  compressBuffer1 :: GHC.Integer.Type.Integer
  {- Strictness: x -}
18794af5b4eb4cc0eb4f719cfc7094d0
  decompressBuffer ::
    Data.Map.Base.Map GHC.Integer.Type.Integer [GHC.Types.Char]
    -> GHC.Integer.Type.Integer -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: (\ (dictionary :: Data.Map.Base.Map
                                    GHC.Integer.Type.Integer [GHC.Types.Char])
                   (code :: GHC.Integer.Type.Integer) ->
                 case LZW.$slookup1 @ [GHC.Types.Char] code dictionary of wild {
                   GHC.Base.Nothing
                   -> case GHC.Show.$w$cshowsPrec3
                             0#
                             code
                             (GHC.Types.[] @ GHC.Types.Char) of ww2 { (#,#) ww3 ww4 ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.Types.: @ GHC.Types.Char ww3 ww4)
                        (GHC.CString.unpackAppendCString#
                           " in "#
                           (Data.Map.Base.$fShowMap_$cshow
                              @ GHC.Integer.Type.Integer
                              @ [GHC.Types.Char]
                              GHC.Show.$fShowInteger
                              GHC.Show.$fShow[]_$s$fShow[]1
                              dictionary)) }
                   GHC.Base.Just ipv -> ipv }) -}
95321e67198b5759e33cf2120c43a458
  forwardBuildDictionary ::
    Data.Map.Base.Map GHC.Integer.Type.Integer [GHC.Types.Char]
    -> [GHC.Integer.Type.Integer]
    -> [GHC.Integer.Type.Integer]
    -> GHC.Base.String
    -> Data.Map.Base.Map GHC.Integer.Type.Integer [GHC.Types.Char]
  {- Arity: 4, Strictness: <S,U><S,1*U><L,1*U><L,A>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, True)
                (\ (w :: Data.Map.Base.Map
                           GHC.Integer.Type.Integer [GHC.Types.Char])
                   (w1 :: [GHC.Integer.Type.Integer])
                   (w2 :: [GHC.Integer.Type.Integer])
                   (w3 :: GHC.Base.String) ->
                 LZW.$wforwardBuildDictionary w w1 w2) -}
4e1d3a368888e800697c07f77e1b49f4
  forwardCompression ::
    Data.Map.Base.Map [GHC.Types.Char] GHC.Integer.Type.Integer
    -> GHC.Base.String
    -> GHC.Base.String
    -> [GHC.Integer.Type.Integer]
    -> [GHC.Integer.Type.Integer]
  {- Arity: 4, Strictness: <L,U><S,1*U><S,1*U><S,1*U> -}
8869b0749e23bf37c4f0ad8b15273e19
  forwardDecompression ::
    Data.Map.Base.Map GHC.Integer.Type.Integer [GHC.Types.Char]
    -> [GHC.Integer.Type.Integer]
    -> [GHC.Integer.Type.Integer]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,U><S,1*U><L,1*U><S,1*U> -}
9c59abb038722635a3b29ea769909219
  lzwBuildDictionary ::
    [GHC.Integer.Type.Integer]
    -> Data.Map.Base.Map GHC.Integer.Type.Integer [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (charCodes :: [GHC.Integer.Type.Integer]) ->
                 LZW.forwardBuildDictionary
                   LZW.startingIntegerToASCIIDictionary
                   charCodes
                   (GHC.Types.[] @ GHC.Integer.Type.Integer)
                   (GHC.Types.[] @ GHC.Types.Char)) -}
87dd67d17efb69e7dc1fffa306b933e9
  lzwCompress :: GHC.Base.String -> [GHC.Integer.Type.Integer]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (text :: GHC.Base.String) ->
                 LZW.forwardCompression
                   LZW.startingASCIIToIntegerDictionary
                   text
                   (GHC.Types.[] @ GHC.Types.Char)
                   (GHC.Types.[] @ GHC.Integer.Type.Integer)) -}
fa9c12a716f9c2bfffbe283690d13d5e
  lzwDecompress :: [GHC.Integer.Type.Integer] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (charCodes :: [GHC.Integer.Type.Integer]) ->
                 LZW.forwardDecompression
                   LZW.startingIntegerToASCIIDictionary
                   charCodes
                   (GHC.Types.[] @ GHC.Integer.Type.Integer)
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b0c0bbf9c9dd619a0e83da1fdf8b4c34
  startingASCIIToIntegerDictionary ::
    Data.Map.Base.Map [GHC.Types.Char] GHC.Integer.Type.Integer
  {- Unfolding: (LZW.$sfromList2
                   @ GHC.Integer.Type.Integer
                   LZW.startingASCIIToIntegerDictionary1) -}
d65c9c422b288461fb89df9ac38b72a0
  startingASCIIToIntegerDictionary1 ::
    [([GHC.Types.Char], GHC.Integer.Type.Integer)]
  {- Unfolding: (LZW.startingASCIIToIntegerDictionary_go 1#) -}
2b8fe34d0b8ef1d679ee4bf16266673d
  startingASCIIToIntegerDictionary_go ::
    GHC.Prim.Int# -> [([GHC.Types.Char], GHC.Integer.Type.Integer)]
  {- Arity: 1, Strictness: <L,U> -}
5f0394dd5db775b7121f4848de6bc0bd
  startingIntegerToASCIIDictionary ::
    Data.Map.Base.Map GHC.Integer.Type.Integer [GHC.Types.Char]
  {- Unfolding: (LZW.$sfromList
                   @ [GHC.Types.Char]
                   LZW.startingIntegerToASCIIDictionary1) -}
163ed4fd4b25426a3f9e3ba21eb1be72
  startingIntegerToASCIIDictionary1 ::
    [(GHC.Integer.Type.Integer, [GHC.Types.Char])]
  {- Unfolding: (LZW.startingIntegerToASCIIDictionary_go 1#) -}
94ae6fdf704c0cedb2f24bee6c7ed2b4
  startingIntegerToASCIIDictionary_go ::
    GHC.Prim.Int# -> [(GHC.Integer.Type.Integer, [GHC.Types.Char])]
  {- Arity: 1, Strictness: <L,U> -}
"SPEC/LZW fromList @ Integer _" [ALWAYS] forall @ a
                                                ($dOrd :: GHC.Classes.Ord GHC.Integer.Type.Integer)
  Data.Map.Base.fromList @ GHC.Integer.Type.Integer @ a $dOrd
  = LZW.$sfromList @ a
"SPEC/LZW fromList @ [Char] _" [ALWAYS] forall @ a
                                               ($dOrd :: GHC.Classes.Ord [GHC.Types.Char])
  Data.Map.Base.fromList @ [GHC.Types.Char] @ a $dOrd
  = LZW.$sfromList2 @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

