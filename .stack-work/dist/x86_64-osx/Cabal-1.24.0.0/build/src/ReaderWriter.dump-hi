
==================== FINAL INTERFACE ====================
2016-12-31 07:59:00.528561 UTC

interface PiousPiper-0.1.0.0-7JUD62QrIKHrrLhY6xrzv:ReaderWriter 8001
  interface hash: 71d7ce941eb3432e18b91cd0ade73c5a
  ABI hash: 1b58139f21ff90c3e3339ac8b62b32b2
  export-list hash: 22beeed6b02bdf0153d7d00cde002411
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: a4046e0fdab24403354cf30558c1ea1c
  sig of: Nothing
  used TH splices: False
  where
exports:
  ReaderWriter.bytesNeededForInteger
  ReaderWriter.compressedFileOutputLocation
  ReaderWriter.convert8BytesToInteger
  ReaderWriter.convertIntegerTo8Bytes
  ReaderWriter.convertListOf8BytesToListOfIntegers
  ReaderWriter.convertListOfIntegersToListof8Bytes
  ReaderWriter.decompressedFileOutputLocation
  ReaderWriter.dividerValue
  ReaderWriter.getCompressedDataAsIntegers
  ReaderWriter.mergeCompressedData
  ReaderWriter.readCompressedDataFromFile
  ReaderWriter.splitCompressedIntegersOnDividerValue
  ReaderWriter.writeCompressedDataToFile
  ReaderWriter.writeDecompressedTextToFile
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0*
                      bytestring-0.10.8.1@bytestring-0.10.8.1*
                      deepseq-1.4.2.0@deepseq-1.4.2.0 filepath-1.4.1.0@filepath-1.4.1.0
                      ghc-prim-0.5.0.0 integer-gmp-1.0.0.1
                      split-0.2.3.1@split-0.2.3.1-IJKK4pOCYGKud0jZImZke
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:Data.Word 34db1dae76cf3db02c16aed2b8427443
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.IO ad985d7a3fc986e9b9c610fb344d9106
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString 1e4e7fc94303c79e3e10c7f5054420f7
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Internal 96a214b84fd13ce168aecf88c70c8f1b
import  -/  filepath-1.4.1.0@filepath-1.4.1.0:System.FilePath.Windows c6d12f2049948b0228b44397fd003442
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 62c0e736506aac47ef40569f5b82e19d
import  -/  split-0.2.3.1@split-0.2.3.1-IJKK4pOCYGKud0jZImZke:Data.List.Split 46e8ab9554123893f27696c65d88e63d
import  -/  split-0.2.3.1@split-0.2.3.1-IJKK4pOCYGKud0jZImZke:Data.List.Split.Internals 91fdfee0190d7e76d57defeef91ab9d3
60e79659f03289954a238746a9f116c0
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   ReaderWriter.$trModule2
                   ReaderWriter.$trModule1) -}
b56429d6c980d9335499dc8cc8ee5842
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ReaderWriter"#) -}
0721d7ffbc76980951c94a1609c86d31
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "PiousPiper-0.1.0.0-7JUD62QrIKHrrLhY6xrzv"#) -}
e0059407df865e2d8143da8227858730
  $wconvertListOfIntegersToListof8Bytes ::
    [GHC.Integer.Type.Integer]
    -> (# GHC.Word.Word8, [GHC.Word.Word8] #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: [GHC.Integer.Type.Integer]) ->
                 let {
                   bytesPerInteger :: GHC.Integer.Type.Integer
                   = ReaderWriter.bytesNeededForInteger_go
                       (GHC.List.maximum_$smaximum w)
                       ReaderWriter.dividerValue
                 } in
                 (# GHC.Word.$fBitsWord8_$cfromInteger bytesPerInteger,
                    letrec {
                      go1 :: [GHC.Integer.Type.Integer] -> [GHC.Word.Word8]
                        {- Arity: 1, Strictness: <S,1*U> -}
                      = \ (ds :: [GHC.Integer.Type.Integer]) ->
                        case ds of wild {
                          [] -> GHC.Types.[] @ GHC.Word.Word8
                          : y ys
                          -> GHC.Base.++
                               @ GHC.Word.Word8
                               (ReaderWriter.convertIntegerTo8Bytes_go
                                  bytesPerInteger
                                  y
                                  (GHC.Types.[] @ GHC.Word.Word8))
                               (go1 ys) }
                    } in
                    go1 w #)) -}
6a333db158042684ea496a731d8d28e4
  $wgetCompressedDataAsIntegers ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [GHC.Integer.Type.Integer]
  {- Arity: 4, Strictness: <S,U><L,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww3 0#) of wild1 {
                   GHC.Types.False
                   -> ReaderWriter.convertListOf8BytesToListOfIntegers_go
                        (Data.ByteString.Internal.$wunpackAppendBytesLazy
                           ww
                           ww1
                           (GHC.Prim.+# ww2 1#)
                           (GHC.Prim.-# ww3 1#)
                           (GHC.Types.[] @ GHC.Word.Word8))
                        (case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# ww ww2)
                                0#
                                GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.PtrRepLifted
                                @ GHC.ForeignPtr.ForeignPtrContents
                                ww1
                                ipv of s' { DEFAULT ->
                         GHC.Integer.Type.smallInteger (GHC.Prim.word2Int# ipv1) } })
                        (GHC.Types.[] @ GHC.Integer.Type.Integer)
                   GHC.Types.True
                   -> case ReaderWriter.getCompressedDataAsIntegers1
                      ret_ty [GHC.Integer.Type.Integer]
                      of {} }) -}
09f6dfc7262fbcde0be89042824ad28b
  bytesNeededForInteger ::
    GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (num :: GHC.Integer.Type.Integer) ->
                 ReaderWriter.bytesNeededForInteger_go
                   num
                   ReaderWriter.dividerValue) -}
7265f1450f88eca3fc11caaad01f9b10
  bytesNeededForInteger_go ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <S,U><S,U> -}
25b7437d4c9682529674d7182fc65141
  compressedFileOutputLocation :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   "./files/outputs/compressed/"#) -}
ae39a0b06536835d36dc818f43c518e2
  convert8BytesToInteger ::
    [GHC.Word.Word8] -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (bytes :: [GHC.Word.Word8]) ->
                 ReaderWriter.convert8BytesToInteger_go
                   bytes
                   ReaderWriter.convert8BytesToInteger1
                   ReaderWriter.dividerValue) -}
d51dd8e54ab9a51b3634a29b3d5215f2
  convert8BytesToInteger1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
7d4de5c845fbbafb2b734b4a5430f280
  convert8BytesToInteger_go ::
    [GHC.Word.Word8]
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
  {- Arity: 3, Strictness: <S,1*U><L,U><S,1*U> -}
4fd01884d1181968516bfaa29049e1b3
  convertIntegerTo8Bytes ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer -> [GHC.Word.Word8]
  {- Arity: 2, Strictness: <S,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (maxNumBytes :: GHC.Integer.Type.Integer)
                   (num :: GHC.Integer.Type.Integer) ->
                 ReaderWriter.convertIntegerTo8Bytes_go
                   maxNumBytes
                   num
                   (GHC.Types.[] @ GHC.Word.Word8)) -}
b39c1e9e655a3a6b8fffa8385ca160a4
  convertIntegerTo8Bytes_go ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer -> [GHC.Word.Word8] -> [GHC.Word.Word8]
  {- Arity: 3, Strictness: <S,U><L,U><L,U> -}
136757bd2ddb437a48d07276d0729784
  convertListOf8BytesToListOfIntegers ::
    [GHC.Word.Word8]
    -> GHC.Integer.Type.Integer -> [GHC.Integer.Type.Integer]
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (bytes :: [GHC.Word.Word8])
                   (bytesPerInteger :: GHC.Integer.Type.Integer) ->
                 ReaderWriter.convertListOf8BytesToListOfIntegers_go
                   bytes
                   bytesPerInteger
                   (GHC.Types.[] @ GHC.Integer.Type.Integer)) -}
c64730ebfa53fe5f781c87f00ffb6a7d
  convertListOf8BytesToListOfIntegers_go ::
    [GHC.Word.Word8]
    -> GHC.Integer.Type.Integer
    -> [GHC.Integer.Type.Integer]
    -> [GHC.Integer.Type.Integer]
  {- Arity: 3, Strictness: <S,1*U><L,U><S,1*U> -}
abc30b083033465c295313f593b2bca7
  convertListOfIntegersToListof8Bytes ::
    [GHC.Integer.Type.Integer] -> [GHC.Word.Word8]
  {- Arity: 1, Strictness: <L,U>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [GHC.Integer.Type.Integer]) ->
                 case ReaderWriter.$wconvertListOfIntegersToListof8Bytes
                        w of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Word.Word8 ww1 ww2 }) -}
cf561cce682a68e4f2f9bfe4329245cc
  decompressedFileOutputLocation :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   "./files/outputs/decompressed/"#) -}
4d71a6de2b9a9f75a75c97d5fd0eb1e8
  dividerValue :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
9f510dc9c78bb5e1c7130949e123dbf3
  getCompressedDataAsIntegers ::
    Data.ByteString.Internal.ByteString -> [GHC.Integer.Type.Integer]
  {- Arity: 1, Strictness: <S(SLSS),U(U,U,U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.ByteString.Internal.ByteString) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 ReaderWriter.$wgetCompressedDataAsIntegers ww1 ww2 ww3 ww4 }) -}
ce654546c3e7bfc4d8adfaad6d8d903c
  getCompressedDataAsIntegers1 :: Data.ByteString.Internal.ByteString
  {- Strictness: x -}
8db8e1c1e72a180a64f65dc6babc419e
  mergeCompressedData ::
    ([GHC.Integer.Type.Integer], [GHC.Integer.Type.Integer])
    -> [GHC.Integer.Type.Integer]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: ([GHC.Integer.Type.Integer],
                           [GHC.Integer.Type.Integer])) ->
                 case ds of wild { (,) firstHalf secondHalf ->
                 GHC.Base.augment
                   @ GHC.Integer.Type.Integer
                   (\ @ b
                      (c :: GHC.Integer.Type.Integer -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Integer.Type.Integer @ b c n firstHalf)
                   (GHC.Types.:
                      @ GHC.Integer.Type.Integer
                      ReaderWriter.dividerValue
                      secondHalf) }) -}
7c3f5b8f9f917851cdc763ab1e752298
  readCompressedDataFromFile ::
    GHC.Base.String -> GHC.Types.IO Data.ByteString.Internal.ByteString
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.ByteString.readFile1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.ByteString.Internal.ByteString>_R)) -}
aa32d3db2e2d998eadc9f5ca060f575c
  splitCompressedIntegersOnDividerValue ::
    [GHC.Integer.Type.Integer]
    -> ([GHC.Integer.Type.Integer], [GHC.Integer.Type.Integer])
  {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [GHC.Integer.Type.Integer]) ->
                 let {
                   listOfParallelData :: [[GHC.Integer.Type.Integer]]
                   = Data.List.Split.Internals.splitOn
                       @ GHC.Integer.Type.Integer
                       GHC.Integer.Type.$fEqInteger
                       ReaderWriter.splitCompressedIntegersOnDividerValue1
                       w
                 } in
                 (GHC.List.head @ [GHC.Integer.Type.Integer] listOfParallelData,
                  GHC.List.last @ [GHC.Integer.Type.Integer] listOfParallelData)) -}
bfb9603671b6328e3ff7716667303411
  splitCompressedIntegersOnDividerValue1 ::
    [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   ReaderWriter.dividerValue
                   (GHC.Types.[] @ GHC.Integer.Type.Integer)) -}
aa74616be0c55a0e4d124dfc37f98ac4
  writeCompressedDataToFile ::
    GHC.IO.FilePath
    -> ([GHC.Integer.Type.Integer], [GHC.Integer.Type.Integer])
    -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,U><L,U(U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                ReaderWriter.writeCompressedDataToFile1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R <([GHC.Integer.Type.Integer], [GHC.Integer.Type.Integer])>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
d79dd0a41a5228e54f37fa83498a2b15
  writeCompressedDataToFile1 ::
    GHC.IO.FilePath
    -> ([GHC.Integer.Type.Integer], [GHC.Integer.Type.Integer])
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><L,U(U,U)><S,U>,
     Unfolding: (\ (filename :: GHC.IO.FilePath)
                   (compressedData :: ([GHC.Integer.Type.Integer],
                                       [GHC.Integer.Type.Integer]))
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Control.Exception.Base.bracket1
                   @ GHC.IO.Handle.Types.Handle
                   @ ()
                   @ ()
                   (GHC.IO.Handle.FD.openBinaryFile1
                      (GHC.Base.++
                         @ GHC.Types.Char
                         ReaderWriter.compressedFileOutputLocation
                         (GHC.CString.unpackAppendCString#
                            "compressed-"#
                            (case System.FilePath.Windows.$wsplitFileName_
                                    filename of ww { (#,#) ww1 ww2 ->
                             ww2 })))
                      GHC.IO.IOMode.WriteMode)
                     `cast`
                   (Sym (GHC.Types.N:IO[0] <GHC.IO.Handle.Types.Handle>_R))
                   GHC.IO.Handle.hClose1
                     `cast`
                   (<GHC.IO.Handle.Types.Handle>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   (\ (h :: GHC.IO.Handle.Types.Handle)[OneShot]
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case ReaderWriter.$wconvertListOfIntegersToListof8Bytes
                           (ReaderWriter.mergeCompressedData
                              compressedData) of ww { (#,#) ww1 ww2 ->
                    let {
                      ws :: [GHC.Word.Word8] = GHC.Types.: @ GHC.Word.Word8 ww1 ww2
                    } in
                    case GHC.List.$wlenAcc @ GHC.Word.Word8 ws 0# of ww3 { DEFAULT ->
                    case Data.ByteString.Internal.$wunsafePackLenBytes
                           ww3
                           ws of ww4 { Data.ByteString.Internal.PS ww5 ww6 ww7 ww8 ->
                    Data.ByteString.$whPut h ww5 ww6 ww7 ww8 eta1 } } })
                     `cast`
                   (<GHC.IO.Handle.Types.Handle>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   eta) -}
baaf65fb424a569be77c39a04d9c33d5
  writeDecompressedTextToFile ::
    GHC.IO.FilePath
    -> ([GHC.Types.Char], [GHC.Types.Char]) -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,U><L,U(U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                ReaderWriter.writeDecompressedTextToFile1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R <([GHC.Types.Char], [GHC.Types.Char])>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
537e86f51084322222ba3164db173cca
  writeDecompressedTextToFile1 ::
    GHC.IO.FilePath
    -> ([GHC.Types.Char], [GHC.Types.Char])
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><L,U(U,U)><S,U>,
     Unfolding: (\ (filename :: GHC.IO.FilePath)
                   (splitText :: ([GHC.Types.Char], [GHC.Types.Char]))
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   fileLocation :: GHC.Base.String
                   = GHC.Base.++
                       @ GHC.Types.Char
                       ReaderWriter.decompressedFileOutputLocation
                       (GHC.CString.unpackAppendCString#
                          "decompressed-"#
                          (case System.FilePath.Windows.$wsplitFileName_
                                  filename of ww { (#,#) ww1 ww2 ->
                           ww2 }))
                 } in
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.Show.$fShow[]_$s$cshow1 fileLocation)
                        GHC.Types.True
                        eta of ds1 { (#,#) ipv ipv1 ->
                 Control.Exception.Base.bracket1
                   @ GHC.IO.Handle.Types.Handle
                   @ ()
                   @ ()
                   (GHC.IO.Handle.FD.openFile1 fileLocation GHC.IO.IOMode.WriteMode)
                     `cast`
                   (Sym (GHC.Types.N:IO[0] <GHC.IO.Handle.Types.Handle>_R))
                   GHC.IO.Handle.hClose1
                     `cast`
                   (<GHC.IO.Handle.Types.Handle>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   (\ (hdl :: GHC.IO.Handle.Types.Handle)[OneShot]
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    GHC.IO.Handle.Text.hPutStr2
                      hdl
                      (case splitText of wild { (,) x ds2 ->
                       GHC.Base.++ @ GHC.Types.Char x ds2 })
                      GHC.Types.False
                      eta1)
                     `cast`
                   (<GHC.IO.Handle.Types.Handle>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   ipv }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

