module LZWSpec (main, spec) where

import Test.Hspec
import Test.QuickCheck

import qualified Data.Map as Map

import LZW

main :: IO ()
main = hspec spec

spec :: Spec
spec = do
  describe "startingASCIIToIntegerDictionary" $ do
    it "produces map" $ do
      startingASCIIToIntegerDictionary `shouldBe` Map.fromList [("\SOH",1),("\STX",2),("\ETX",3),("\EOT",4),("\ENQ",5),("\ACK",6),("\a",7),("\b",8),("\t",9),("\n",10),("\v",11),("\f",12),("\r`",96),("a",97),("b",98),("c",99),("d",100),("e",101),("f",102),("g",103),("h",104),("i",105),("j",106),("k",107),("l",108),("m",109),("n",110),("o",111),("p",112),("q",113),("r",114),("s",115),("t",116),("u",117),("v",118),("w",119),("x",120),("y",121),("z",122),("{",123),("|",124),("}",125),("~",126),("\DEL",127)]

  describe "lzw compression" $ do
    it "compresses T" $ do
      lzwCompress "T" `shouldBe` [84]
    it "compresses TO" $ do
      lzwCompress "TO" `shouldBe` [84, 79]
    it "compresses TOBEORNOTTOBEORTOBEORNOT" $ do
      lzwCompress "TOBEORNOTTOBEORTOBEORNOT" `shouldBe` [84,79,66,69,79,82,78,79,84,128,130,132,137,131,133,135]

  describe "startingIntegerToASCIIDictionary" $ do
    it "produces map" $ do
      startingIntegerToASCIIDictionary `shouldBe` Map.fromList [(1,"\SOH"),(2,"\STX"),(3,"\ETX"),(4,"\EOT"),(5,"\ENQ"),(6,"\ACK"),(7,"\a"),(8,"\b"),(9,"\t"),(10,"\n"),(11,"\v"),(12,"\f"),(13,"\r`"),(97,"a"),(98,"b"),(99,"c"),(100,"d"),(101,"e"),(102,"f"),(103,"g"),(104,"h"),(105,"i"),(106,"j"),(107,"k"),(108,"l"),(109,"m"),(110,"n"),(111,"o"),(112,"p"),(113,"q"),(114,"r"),(115,"s"),(116,"t"),(117,"u"),(118,"v"),(119,"w"),(120,"x"),(121,"y"),(122,"z"),(123,"{"),(124,"|"),(125,"}"),(126,"~"),(127,"\DEL")]

  describe "develop decompression dictionary" $ do
    it "builds a dictionary from T" $ do
      lzwBuildDictionary [84] `shouldBe` Map.fromList [(1,"\SOH"),(2,"\STX"),(3,"\ETX"),(4,"\EOT"),(5,"\ENQ"),(6,"\ACK"),(7,"\a"),(8,"\b"),(9,"\t"),(10,"\n"),(11,"\v"),(12,"\f"),(13,"\r`"),(97,"a"),(98,"b"),(99,"c"),(100,"d"),(101,"e"),(102,"f"),(103,"g"),(104,"h"),(105,"i"),(106,"j"),(107,"k"),(108,"l"),(109,"m"),(110,"n"),(111,"o"),(112,"p"),(113,"q"),(114,"r"),(115,"s"),(116,"t"),(117,"u"),(118,"v"),(119,"w"),(120,"x"),(121,"y"),(122,"z"),(123,"{"),(124,"|"),(125,"}"),(126,"~"),(127,"\DEL")]
    it "builds a dictionary from TO" $ do
      lzwBuildDictionary [84, 79] `shouldBe` Map.fromList [(1,"\SOH"),(2,"\STX"),(3,"\ETX"),(4,"\EOT"),(5,"\ENQ"),(6,"\ACK"),(7,"\a"),(8,"\b"),(9,"\t"),(10,"\n"),(11,"\v"),(12,"\f"),(13,"\r`"),(97,"a"),(98,"b"),(99,"c"),(100,"d"),(101,"e"),(102,"f"),(103,"g"),(104,"h"),(105,"i"),(106,"j"),(107,"k"),(108,"l"),(109,"m"),(110,"n"),(111,"o"),(112,"p"),(113,"q"),(114,"r"),(115,"s"),(116,"t"),(117,"u"),(118,"v"),(119,"w"),(120,"x"),(121,"y"),(122,"z"),(123,"{"),(124,"|"),(125,"}"),(126,"~"),(127,"\DEL")]
    it "builds a dictionary from TOB" $ do
      lzwBuildDictionary [84, 79, 66] `shouldBe` Map.fromList [ (1,"\SOH"),(2,"\STX"),(3,"\ETX"),(4,"\EOT"),(5,"\ENQ"),(6,"\ACK"),(7,"\a"),(8,"\b"),(9,"\t"),(10,"\n"),(11,"\v"),(12,"\f"),(13,"\r`"),(97,"a"),(98,"b"),(99,"c"),(100,"d"),(101,"e"),(102,"f"),(103,"g"),(104,"h"),(105,"i"),(106,"j"),(107,"k"),(108,"l"),(109,"m"),(110,"n"),(111,"o"),(112,"p"),(113,"q"),(114,"r"),(115,"s"),(116,"t"),(117,"u"),(118,"v"),(119,"w"),(120,"x"),(121,"y"),(122,"z"),(123,"{"),(124,"|"),(125,"}"),(126,"~"),(127,"\DEL")
                                                              , (128, "TO")]
    it "builds a dictionary from TOBE" $ do
      lzwBuildDictionary [84, 79, 66, 69] `shouldBe` Map.fromList [ (1,"\SOH"),(2,"\STX"),(3,"\ETX"),(4,"\EOT"),(5,"\ENQ"),(6,"\ACK"),(7,"\a"),(8,"\b"),(9,"\t"),(10,"\n"),(11,"\v"),(12,"\f"),(13,"\r`"),(97,"a"),(98,"b"),(99,"c"),(100,"d"),(101,"e"),(102,"f"),(103,"g"),(104,"h"),(105,"i"),(106,"j"),(107,"k"),(108,"l"),(109,"m"),(110,"n"),(111,"o"),(112,"p"),(113,"q"),(114,"r"),(115,"s"),(116,"t"),(117,"u"),(118,"v"),(119,"w"),(120,"x"),(121,"y"),(122,"z"),(123,"{"),(124,"|"),(125,"}"),(126,"~"),(127,"\DEL")
                                                                 , (128, "TO"), (129, "OB")]
    it "builds a dictionary from TOBEO" $ do
      lzwBuildDictionary [84, 79, 66, 69, 79] `shouldBe` Map.fromList [ (1,"\SOH"),(2,"\STX"),(3,"\ETX"),(4,"\EOT"),(5,"\ENQ"),(6,"\ACK"),(7,"\a"),(8,"\b"),(9,"\t"),(10,"\n"),(11,"\v"),(12,"\f"),(13,"\r`"),(97,"a"),(98,"b"),(99,"c"),(100,"d"),(101,"e"),(102,"f"),(103,"g"),(104,"h"),(105,"i"),(106,"j"),(107,"k"),(108,"l"),(109,"m"),(110,"n"),(111,"o"),(112,"p"),(113,"q"),(114,"r"),(115,"s"),(116,"t"),(117,"u"),(118,"v"),(119,"w"),(120,"x"),(121,"y"),(122,"z"),(123,"{"),(124,"|"),(125,"}"),(126,"~"),(127,"\DEL")
                                                                 , (128, "TO"), (129, "OB"), (130, "BE")]
    it "builds a dictionary from TOBEOR" $ do
      lzwBuildDictionary [84, 79, 66, 69, 79, 82] `shouldBe` Map.fromList [ (1,"\SOH"),(2,"\STX"),(3,"\ETX"),(4,"\EOT"),(5,"\ENQ"),(6,"\ACK"),(7,"\a"),(8,"\b"),(9,"\t"),(10,"\n"),(11,"\v"),(12,"\f"),(13,"\r`"),(97,"a"),(98,"b"),(99,"c"),(100,"d"),(101,"e"),(102,"f"),(103,"g"),(104,"h"),(105,"i"),(106,"j"),(107,"k"),(108,"l"),(109,"m"),(110,"n"),(111,"o"),(112,"p"),(113,"q"),(114,"r"),(115,"s"),(116,"t"),(117,"u"),(118,"v"),(119,"w"),(120,"x"),(121,"y"),(122,"z"),(123,"{"),(124,"|"),(125,"}"),(126,"~"),(127,"\DEL")
                                                                          , (128, "TO"), (129, "OB"), (130, "BE"), (131, "EO")]
    it "builds a dictionary from TOBEORN" $ do
      lzwBuildDictionary [84, 79, 66, 69, 79, 82, 78] `shouldBe` Map.fromList [ (1,"\SOH"),(2,"\STX"),(3,"\ETX"),(4,"\EOT"),(5,"\ENQ"),(6,"\ACK"),(7,"\a"),(8,"\b"),(9,"\t"),(10,"\n"),(11,"\v"),(12,"\f"),(13,"\r`"),(97,"a"),(98,"b"),(99,"c"),(100,"d"),(101,"e"),(102,"f"),(103,"g"),(104,"h"),(105,"i"),(106,"j"),(107,"k"),(108,"l"),(109,"m"),(110,"n"),(111,"o"),(112,"p"),(113,"q"),(114,"r"),(115,"s"),(116,"t"),(117,"u"),(118,"v"),(119,"w"),(120,"x"),(121,"y"),(122,"z"),(123,"{"),(124,"|"),(125,"}"),(126,"~"),(127,"\DEL")
                                                                          , (128, "TO"), (129, "OB"), (130, "BE"), (131, "EO"), (132, "OR")]
    it "builds a dictionary from TOBEORNO" $ do
      lzwBuildDictionary [84, 79, 66, 69, 79, 82, 78, 79] `shouldBe` Map.fromList [ (1,"\SOH"),(2,"\STX"),(3,"\ETX"),(4,"\EOT"),(5,"\ENQ"),(6,"\ACK"),(7,"\a"),(8,"\b"),(9,"\t"),(10,"\n"),(11,"\v"),(12,"\f"),(13,"\r`"),(97,"a"),(98,"b"),(99,"c"),(100,"d"),(101,"e"),(102,"f"),(103,"g"),(104,"h"),(105,"i"),(106,"j"),(107,"k"),(108,"l"),(109,"m"),(110,"n"),(111,"o"),(112,"p"),(113,"q"),(114,"r"),(115,"s"),(116,"t"),(117,"u"),(118,"v"),(119,"w"),(120,"x"),(121,"y"),(122,"z"),(123,"{"),(124,"|"),(125,"}"),(126,"~"),(127,"\DEL")
                                                                          , (128, "TO"), (129, "OB"), (130, "BE"), (131, "EO"), (132, "OR"), (133, "RN")]
    it "builds a dictionary from TOBEORNOT" $ do
      lzwBuildDictionary [84, 79, 66, 69, 79, 82, 78, 79, 84] `shouldBe` Map.fromList [ (1,"\SOH"),(2,"\STX"),(3,"\ETX"),(4,"\EOT"),(5,"\ENQ"),(6,"\ACK"),(7,"\a"),(8,"\b"),(9,"\t"),(10,"\n"),(11,"\v"),(12,"\f"),(13,"\r`"),(97,"a"),(98,"b"),(99,"c"),(100,"d"),(101,"e"),(102,"f"),(103,"g"),(104,"h"),(105,"i"),(106,"j"),(107,"k"),(108,"l"),(109,"m"),(110,"n"),(111,"o"),(112,"p"),(113,"q"),(114,"r"),(115,"s"),(116,"t"),(117,"u"),(118,"v"),(119,"w"),(120,"x"),(121,"y"),(122,"z"),(123,"{"),(124,"|"),(125,"}"),(126,"~"),(127,"\DEL")
                                                                          , (128, "TO"), (129, "OB"), (130, "BE"), (131, "EO"), (132, "OR"), (133, "RN"), (134, "NO")]
    it "builds a dictionary from TOBEORNOTTO" $ do
      lzwBuildDictionary [84, 79, 66, 69, 79, 82, 78, 79, 84, 128] `shouldBe` Map.fromList [ (1,"\SOH"),(2,"\STX"),(3,"\ETX"),(4,"\EOT"),(5,"\ENQ"),(6,"\ACK"),(7,"\a"),(8,"\b"),(9,"\t"),(10,"\n"),(11,"\v"),(12,"\f"),(13,"\r`"),(97,"a"),(98,"b"),(99,"c"),(100,"d"),(101,"e"),(102,"f"),(103,"g"),(104,"h"),(105,"i"),(106,"j"),(107,"k"),(108,"l"),(109,"m"),(110,"n"),(111,"o"),(112,"p"),(113,"q"),(114,"r"),(115,"s"),(116,"t"),(117,"u"),(118,"v"),(119,"w"),(120,"x"),(121,"y"),(122,"z"),(123,"{"),(124,"|"),(125,"}"),(126,"~"),(127,"\DEL")
                                                                          , (128, "TO"), (129, "OB"), (130, "BE"), (131, "EO"), (132, "OR"), (133, "RN"), (134, "NO"), (135, "OT")]
    it "builds a dictionary from TOBEORNOTTOBE" $ do
      lzwBuildDictionary [84, 79, 66, 69, 79, 82, 78, 79, 84, 128, 130] `shouldBe` Map.fromList [ (1,"\SOH"),(2,"\STX"),(3,"\ETX"),(4,"\EOT"),(5,"\ENQ"),(6,"\ACK"),(7,"\a"),(8,"\b"),(9,"\t"),(10,"\n"),(11,"\v"),(12,"\f"),(13,"\r`"),(97,"a"),(98,"b"),(99,"c"),(100,"d"),(101,"e"),(102,"f"),(103,"g"),(104,"h"),(105,"i"),(106,"j"),(107,"k"),(108,"l"),(109,"m"),(110,"n"),(111,"o"),(112,"p"),(113,"q"),(114,"r"),(115,"s"),(116,"t"),(117,"u"),(118,"v"),(119,"w"),(120,"x"),(121,"y"),(122,"z"),(123,"{"),(124,"|"),(125,"}"),(126,"~"),(127,"\DEL")
                                                                          , (128, "TO"), (129, "OB"), (130, "BE"), (131, "EO"), (132, "OR"), (133, "RN"), (134, "NO"), (135, "OT"), (136, "TT")]
    -- helped me solve a problem in my algorithm where 137 was being recorded as TOBO
    it "builds a dictionary from TOBEORNOTTOBE" $ do
      lzwBuildDictionary [84, 79, 66, 69, 79, 82, 78, 79, 84, 128, 130, 132] `shouldBe` Map.fromList [ (1,"\SOH"),(2,"\STX"),(3,"\ETX"),(4,"\EOT"),(5,"\ENQ"),(6,"\ACK"),(7,"\a"),(8,"\b"),(9,"\t"),(10,"\n"),(11,"\v"),(12,"\f"),(13,"\r`"),(97,"a"),(98,"b"),(99,"c"),(100,"d"),(101,"e"),(102,"f"),(103,"g"),(104,"h"),(105,"i"),(106,"j"),(107,"k"),(108,"l"),(109,"m"),(110,"n"),(111,"o"),(112,"p"),(113,"q"),(114,"r"),(115,"s"),(116,"t"),(117,"u"),(118,"v"),(119,"w"),(120,"x"),(121,"y"),(122,"z"),(123,"{"),(124,"|"),(125,"}"),(126,"~"),(127,"\DEL")
                                                                             , (128, "TO"), (129, "OB"), (130, "BE"), (131, "EO"), (132, "OR"), (133, "RN"), (134, "NO"), (135, "OT"), (136, "TT"), (137, "TOB")]

  describe "lzw decompression" $ do
    it "decompresses T" $ do
      lzwDecompress [84] `shouldBe` "T"
    it "decompresses TOBEORNOTTOBEORTOBEORNOT" $ do
      lzwDecompress [84,79,66,69,79,82,78,79,84,128,130,132,137,131,133,135] `shouldBe` "TOBEORNOTTOBEORTOBEORNOT"


  describe "roundtrip" $ do
    it "compresses and decompresses ipsum lorem text" $ do
      (lzwDecompress (lzwCompress ipsumLoremText)) `shouldBe` ipsumLoremText




























ipsumLoremText = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla non vehicula mi. Donec aliquam metus in commodo hendrerit. Cras ultrices, magna non auctor pellentesque, nibh lectus placerat sem, eget consequat risus lectus vitae lectus. Nunc ac lobortis orci, vitae tristique lectus. Pellentesque nec condimentum lorem, at sodales nunc. Duis gravida libero a tempor convallis. Morbi eget ligula eu quam sollicitudin porta. Pellentesque ullamcorper ut ex sed tristique. Praesent tincidunt ante a velit suscipit molestie. Praesent et sodales risus. Aenean sit amet dolor quis nulla luctus placerat sed eu ligula.\
\In bibendum libero a arcu hendrerit, nec commodo metus porta. Quisque fermentum sollicitudin lorem, congue porttitor ligula tincidunt interdum. Curabitur efficitur, dolor sit amet viverra mollis, ante neque feugiat neque, sed facilisis est ipsum sit amet enim. Sed scelerisque, sapien a pellentesque scelerisque, lectus nisi tempor enim, eu pulvinar eros tellus sed est. Duis in neque nec nisi venenatis tincidunt non fringilla magna. Nulla facilisi. Maecenas sagittis tortor in finibus aliquet. Aenean nec laoreet augue. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Pellentesque libero mi, imperdiet quis metus a, tincidunt ornare libero. Proin tempus, elit a ultrices tempor, lectus neque pellentesque metus, sit amet ultricies orci nunc eget justo. Maecenas vestibulum vel massa sed auctor.\
\Nam sagittis facilisis est. Sed viverra efficitur nibh, eget dapibus magna. Pellentesque vehicula aliquet nisl, ut malesuada mi consectetur et. Aenean elementum nibh non consequat malesuada. In sit amet odio vulputate est ornare ultricies. Nunc quis malesuada diam, nec auctor leo. Nunc tincidunt quis risus in elementum. Donec cursus vulputate est, ut hendrerit nunc tincidunt nec. Aenean sit amet orci dui. Nunc metus metus, pellentesque ac purus vitae, ultricies tincidunt libero. Fusce dapibus eros quis leo vulputate, sit amet imperdiet turpis aliquam. Quisque nec lorem dolor. Proin non dui vel justo dictum vehicula quis ac quam. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Pellentesque sed tempor risus. Maecenas ac ipsum in nulla mollis ultrices lobortis eget dolor.\
\Mauris blandit, tellus et fringilla interdum, felis ante condimentum augue, consectetur accumsan lacus arcu vitae sem. In pretium nulla magna, a faucibus sapien egestas vel. Mauris molestie malesuada malesuada. Praesent sed elit velit. Vivamus luctus ante nec elit euismod dignissim. Pellentesque sagittis blandit elementum. Nulla eleifend est et euismod sodales. Donec ullamcorper lacus porta lacus faucibus convallis.\
\Etiam placerat justo turpis, id porttitor magna condimentum vitae. Vestibulum neque lacus, ultricies id dignissim malesuada, posuere non quam. Praesent imperdiet, dui id molestie blandit, elit neque convallis orci, vitae rutrum odio velit eu nisl. Duis quis auctor odio. Vivamus convallis, diam at semper sagittis, leo nibh accumsan nibh, a imperdiet justo ex vitae risus. Suspendisse tempus nisl enim, vel iaculis odio lobortis at. Ut maximus elit metus, vel tincidunt nisi mollis a. Duis eu lectus lacinia, euismod ligula nec, commodo nunc. In luctus fringilla risus. Suspendisse purus arcu, semper a congue sit amet, consectetur sit amet est. Pellentesque porta lobortis tempor. Nulla vel sem metus.\
\Ut sed ex rhoncus sem molestie porta. Curabitur eleifend, felis sed condimentum pharetra, sem diam iaculis metus, quis aliquam eros risus a urna. Phasellus iaculis et odio eu bibendum. Maecenas purus libero, rutrum id lacinia vel, ornare vel arcu. Proin scelerisque turpis in mattis bibendum. Quisque posuere sollicitudin arcu id commodo. Quisque eu nisi eros. Fusce et rutrum arcu, cursus ultrices risus. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Aliquam quam erat, efficitur vulputate viverra ut, maximus viverra massa. Nullam magna ex, mattis vel imperdiet ac, blandit a odio. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean tempor, justo nec tempus lobortis, sem urna sollicitudin est, ac maximus tellus orci vel eros. In euismod nulla vitae dui rutrum, quis semper nulla rutrum. Praesent sed ante nec tortor vestibulum malesuada nec sed mi. Fusce pellentesque nisi vitae tempor scelerisque.\
\Nam erat libero, tempor vel lorem nec, elementum laoreet ex. Quisque egestas congue sapien, eget rutrum libero porttitor ac. Sed rutrum imperdiet enim, ac feugiat velit ornare quis. Fusce at nunc tellus. Nam nec sollicitudin felis, in consectetur ex. Curabitur bibendum nisl nulla, at vulputate ex aliquam dignissim. Maecenas viverra ac turpis vel pellentesque. Aenean in neque ac dui congue euismod ut sit amet magna.\
\Phasellus cursus tortor sit amet mauris volutpat laoreet. Pellentesque placerat mi vel hendrerit interdum. Morbi a pulvinar enim. Nunc consequat enim id interdum auctor. Donec eros nisi, ornare sed dui vel, tristique aliquam magna. Quisque elit justo, vulputate vitae arcu eu, hendrerit varius mi. Pellentesque non porta ante, ac semper metus. Nullam ultrices fermentum interdum. Etiam vehicula elit iaculis urna convallis, in semper arcu interdum. Praesent porta libero eu ornare blandit. Vivamus vitae eros viverra, mollis est quis, venenatis dui. Aenean nec eros aliquet nunc laoreet ornare. Duis commodo sodales aliquet.\
\Nunc eu malesuada urna. Cras suscipit nisl eu nulla efficitur, quis lacinia elit lobortis. Sed ultrices urna ultricies, convallis velit vitae, fermentum nulla. Nulla quis nunc tempor, egestas tellus id, porta elit. Sed facilisis metus eros, id ultricies neque pretium ut. Fusce commodo leo felis, sed vestibulum orci placerat nec. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras eu aliquet magna. Morbi dictum quam faucibus, venenatis est ut, pretium sapien. Quisque molestie semper ex quis bibendum. Aenean placerat hendrerit leo, sed porttitor erat cursus eget. Fusce nec consequat ligula, et mattis neque.\
\Fusce ac urna molestie, cursus neque non, lacinia ante. Cras mollis enim sem, eu posuere arcu tincidunt ac. Etiam efficitur consequat porta. Aliquam iaculis elit non ullamcorper malesuada. Vestibulum ultrices massa at bibendum rhoncus. Nunc imperdiet pulvinar sagittis. Nullam enim dolor, semper sed fringilla vitae, rhoncus sit amet justo. Cras ut eros velit. Suspendisse egestas faucibus dapibus. Etiam malesuada erat tristique, consequat ligula fringilla, lacinia eros. Aenean vel pulvinar turpis, sit amet commodo nisl. Sed blandit felis sem, non imperdiet est tempor a. Mauris luctus tincidunt egestas. Donec eleifend magna id sodales volutpat."
